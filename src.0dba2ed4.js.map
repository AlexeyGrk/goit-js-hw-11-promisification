{"version":3,"sources":["task-3.js","index.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","randomTimer","makeTransaction","transaction","delay","Promise","resolve","reject","setTimeout","id","logSuccess","time","console","log","logError","warn","amount","then","catch"],"mappings":";;;AAAA,IAAMA,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAEhDK,EAAcN,EAA0B,IAAK,KAC7CO,EAAkB,SAAAC,GAChBC,IAAAA,EAAQH,EACP,OAAA,IAAII,QAAQ,SAACC,EAASC,GAC3BC,WAAW,WACUV,KAAKE,SAAW,GAGjCM,EAAQH,EAAYM,GAAIR,GAExBM,EAAOJ,EAAYM,KAEpBL,MAIDM,EAAa,SAACD,EAAIE,GACtBA,EAAOV,EACPW,QAAQC,IAAmBJ,eAAAA,OAAAA,EAAmBE,kBAAAA,OAAAA,EAA9C,QAGIG,EAAW,SAAAL,GACfG,QAAQG,KAAqCN,gCAAAA,OAAAA,EAA7C,+BAaFP,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAAOC,KAAKP,GAAYQ,MAAMJ,GAEhEZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAAOC,KAAKP,GAAYQ,MAAMJ,GAEhEZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,KAAMC,KAAKP,GAAYQ,MAAMJ,GAE/DZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAAOC,KAAKP,GAAYQ,MAAMJ;;ACzChE,aAHA,QAAA,oBAGA,QAAA","file":"src.0dba2ed4.js","sourceRoot":"../src","sourcesContent":["const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\nconst randomTimer = randomIntegerFromInterval(200, 500);\nconst makeTransaction = transaction => {\n  const delay = randomTimer;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve(transaction.id, randomTimer);\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = (id, time) => {\n  time = randomTimer;\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n","import './sass/main.scss';\n// import './task-1.js';\n// import './task-2.js';\nimport './task-3.js';\n// const myPromise = new Promise((resolve, reject) => {\n//   const result = Math.random() > 0.5;\n//   setTimeout(() => {\n//     if (result) {\n//       resolve('This is success resolve');\n//     }\n//     reject('This is failed promise');\n//   }, 2000);\n// });\n// myPromise\n//   .then(result => {\n//     console.log(result);\n//   })\n//   .catch(error => console.log(error));\n"]}