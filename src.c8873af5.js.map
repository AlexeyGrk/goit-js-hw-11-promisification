{"version":3,"sources":["task-1.js","task-2.js","task-3.js","index.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","randomTimer","makeTransaction","transaction","id","logSuccess","logError","warn","amount","catch"],"mappings":"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","file":"src.c8873af5.js","sourceRoot":"../src","sourcesContent":["const delay = ms => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(`${ms}`);\n    }, ms);\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );\n\n  return Promise.resolve(updatedUsers);\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\ntoggleUserState(users, 'Mango', logger);\ntoggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\nconst randomTimer = randomIntegerFromInterval(200, 500);\nconst makeTransaction = transaction => {\n  const delay = randomTimer;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve(transaction.id, delay);\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = (id, time) => {\n  time = randomTimer;\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n","import './sass/main.scss';\nimport './task-1.js';\nimport './task-2.js';\nimport './task-3.js';\n"]}